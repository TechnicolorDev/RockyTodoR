const { Admin, sequelize } = require('../database/database');
const { v4: uuidv4 } = require('uuid');
const emailService = require('../Services/emailService');
const jobQueue = require('../queue/exports/queue');
const bcrypt = require('bcrypt');
const chalk = require('chalk');
require('dotenv').config();
const { generateCSRFToken, verifyCSRFToken } = require('../protection/csrfProtection');
const csrfStore = require('../cache/csrfStore');  
const { csrfInstance } = require('../protection/csrfProtection');

class EmailController {
    static async sendForgotPasswordEmail(req, res) {
        try {
            const { email } = req.body;

            if (!email) {
                return res.status(400).json({ error: "Email is required." });
            }

            console.log(`Received email: ${email}`);

            const admin = await Admin.findOne({
                where: sequelize.where(
                    sequelize.fn('lower', sequelize.col('email')),
                    sequelize.fn('lower', email)
                )
            });

            if (!admin) {
                console.log(`No user found with email: ${email}`);
                return res.status(404).json({ error: "Email not found." });
            }

            const resetToken = uuidv4();
            admin.resetToken = resetToken;
            admin.resetTokenExpires = new Date(Date.now() + 3600 * 1000);
            await admin.save();

            const resetLink = `${process.env.APP_URL}/reset-password?token=${resetToken}`;
            console.log("Generated reset link:", resetLink);

            const csrfToken = req.session.csrfSecret ? csrfInstance.create(req.session.csrfSecret) : await csrfInstance.secret();
            console.log("Generated CSRF Token:", csrfToken);

            await csrfStore.saveToken('csrfToken_Forget_password', csrfToken, 3600);

            res.setHeader('X-CSRF-Token', csrfToken);

            try {
                await emailService.transporter.verify();
                console.log(chalk.green('SMTP connection successful. Proceeding with sending email.'));
            } catch (smtpError) {
                console.error(chalk.red('SMTP Error:', smtpError));
                return res.status(500).json({ error: "SMTP configuration is invalid or connection failed." });
            }

            const job = await jobQueue.add('sendEmail', {
                to: email,
                subject: "Password Reset Request",
                text: `You requested a password reset. Click the link to reset your password: ${resetLink}`,
                html: `<p>You requested a password reset. Click the link below to reset your password:</p><a href="${resetLink}">Reset Password</a>`
            });

            console.log(chalk.yellow(`Job #${job.id} started for sending password reset email to: ${email}`));

            res.status(202).json({ message: "Password reset email is being processed.", toke: csrfToken });

        } catch (error) {
            console.error("Error sending password reset email:", error);
            res.status(500).json({ error: "Failed to send password reset email." });
        }
    }
    static async resetPassword(req, res) {
        try {
            const { token, newPassword } = req.body;

            const csrfTokenHeader = req.headers['x-csrf-token'];

            if (!csrfTokenHeader) {
                console.error("Missing CSRF token in the request headers.");
                return res.status(403).json({ error: "Missing CSRF token" });
            }

            let csrfTokenFromClient;
            try {
                const parsedToken = JSON.parse(csrfTokenHeader);
                csrfTokenFromClient = parsedToken.token;
            } catch (err) {
                console.error("Error parsing CSRF token header:", err);
                return res.status(400).json({ error: "Invalid CSRF token format" });
            }

            console.log("CSRF Token received from client:", csrfTokenFromClient);

            const csrfTokenGenerated = await csrfStore.getStoredToken('csrfToken_Forget_password');
            console.log("CSRF Token generated by server:", csrfTokenGenerated);

            if (csrfTokenFromClient !== csrfTokenGenerated) {
                console.error("CSRF token mismatch!");
                return res.status(403).json({ error: "Invalid or missing CSRF token" });
            }

            if (!token || !newPassword) {
                return res.status(400).json({ error: "Token and new password are required." });
            }

            const admin = await Admin.findOne({
                where: { resetToken: token },
            });

            if (!admin) {
                return res.status(404).json({ error: "Invalid or expired token." });
            }

            if (admin.resetTokenExpires < Date.now()) {
                return res.status(400).json({ error: "Reset token has expired." });
            }

            const hashedPassword = await bcrypt.hash(newPassword, 10);

            admin.password = hashedPassword;
            admin.resetToken = null;
            admin.resetTokenExpires = null;
            await admin.save();

            res.status(200).json({ message: "Password reset successfully." });
        } catch (error) {
            console.error("Error in password reset:", error);
            res.status(500).json({ error: "An error occurred while resetting the password." });
        }
    }

}

module.exports = EmailController;
